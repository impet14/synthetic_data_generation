# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def DTW_dis(traj1=None,traj2=None,w=None,*args,**kwargs):
    varargin = DTW_dis.varargin
    nargin = DTW_dis.nargin

    # Compute dynamic time wrapping distance of two given trajectories
    if nargin < 3:
        w=copy(Inf)
# DTW_dis.m:4
    
    n=size(traj1,1)
# DTW_dis.m:7
    m=size(traj2,1)
# DTW_dis.m:8
    w=max(cat(w,abs(n - m)))
# DTW_dis.m:9
    DTW=zeros(n + 1,m + 1) + Inf
# DTW_dis.m:11
    DTW[1,1]=0
# DTW_dis.m:12
    for ind_i in arange(2,n + 1,1).reshape(-1):
        for ind_j in arange(max(2,ind_i - w),min(m + 1,ind_i + w),1).reshape(-1):
            cost=norm(traj1[ind_i - 1,:] - traj2[ind_j - 1,:])
# DTW_dis.m:16
            DTW[ind_i,ind_j]=cost + min(cat(DTW[ind_i - 1,ind_j],DTW[ind_i,ind_j - 1],DTW[ind_i - 1,ind_j - 1]))
# DTW_dis.m:17
    
    dis=DTW[n + 1,m + 1]
# DTW_dis.m:20
    return dis
    
if __name__ == '__main__':
    pass

def main():
    print "Testing DTW!"
    DTW_dis()
if __name__== "__main__":
    main()

